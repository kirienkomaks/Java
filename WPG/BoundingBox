public class BoundingBox {
    double xmin;
    double ymin;
    double xmax;
    double ymax;


    /**
     * Powiększa BB tak, aby zawierał punkt (x,y)
     * @param x - współrzędna x
     * @param y - współrzędna y
     */
    void addPoint(double x, double y){
        if(x>xmax && y>ymax){
            this.xmax=x;
            this.ymax=y;
        }
        if(x<xmin && y<ymin){
            this.xmin=x;
            this.ymin=y;
        }
        if(x<xmin && y>ymin){
            this.xmin=x;
        }
        if(x>xmin && y<ymin){
            this.ymin=y;
        }
        if(x>xmax && y<ymax){
            this.xmax=x;
        }
        if(x<xmax && y>ymax){
            this.ymax=y;
        }
    }

    /**
     * Sprawdza, czy BB zawiera punkt (x,y)
     * @param x
     * @param y
     * @return
     */
    boolean contains(double x, double y){
        if (x<xmax && y<ymax && x>xmin && y>ymin) return true;
        return false;
    }

    /**
     * Sprawdza czy dany BB zawiera bb
     * @param bb
     * @return
     */
    boolean contains(BoundingBox bb){
        if (bb.xmax<this.xmax && bb.ymax<this.ymax && bb.xmin>this.xmin && bb.ymin>this.ymin) return true;
        return false;
    }

    /**
     * Sprawdza, czy dany BB przecina się z bb
     * @param bb
     * @return
     */
    boolean intersects(BoundingBox bb){

        return false;
    }
    /**
     * Powiększa rozmiary tak, aby zawierał bb oraz poprzednią wersję this
     * @param bb
     * @return
     */
    BoundingBox add(BoundingBox bb){

        return this;
    }
    /**
     * Sprawdza czy BB jest pusty
     * @return
     */
    boolean isEmpty(){
        if (xmin==Double.NaN && ymin==Double.NaN && xmax==Double.NaN && ymax==Double.NaN)return true;
        return false;
    }

    /**
     * Oblicza i zwraca współrzędną x środka
     * @return if !isEmpty() współrzędna x środka else wyrzuca wyjątek
     * (sam dobierz typ)
     */
    double getCenterX(){
        double cx;
        if (!isEmpty()) {
            return cx=(this.xmax+this.xmin)/2;

        }
        else throw new RuntimeException("Not implemented");
    }
    /**
     * Oblicza i zwraca współrzędną y środka
     * @return if !isEmpty() współrzędna y środka else wyrzuca wyjątek
     * (sam dobierz typ)
     */
    double getCenterY(){
        double cy;
        if (!isEmpty()) {
            return cy=(this.ymax+this.ymin)/2;

        }
        throw new RuntimeException("Not implemented");

    }

    /**
     * Oblicza odległość pomiędzy środkami this bounding box oraz bbx
     * @param bbx prostokąt, do którego liczona jest odległość
     * @return if !isEmpty odległość, else wyrzuca wyjątek lub zwraca maksymalną możliwą wartość double
     * Ze względu na to, że są to współrzędne geograficzne, zamiast odległosci euklidesowej możesz użyć wzoru haversine
     * (ang. haversine formula)
     */
    double distanceTo(BoundingBox bbx){
        throw new RuntimeException("Not implemented");
    }

    public String toString(){
        return xmin+","+ymin+","+xmax+","+ymax;
    }

}
