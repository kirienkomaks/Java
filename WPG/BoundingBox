import static java.lang.Math.sqrt;

public class BoundingBox {
    double xmin;
    double ymin;
    double xmax;
    double ymax;
    boolean empty = false;


    void addPoint(double x, double y){
        if(x>xmax && y>ymax){
            this.xmax=x;
            this.ymax=y;
        }
        if(x<xmin && y<ymin){
            this.xmin=x;
            this.ymin=y;
        }
        if(x<xmin && y>ymin){
            this.xmin=x;
        }
        if(x>xmin && y<ymin){
            this.ymin=y;
        }
        if(x>xmax && y<ymax){
            this.xmax=x;
        }
        if(x<xmax && y>ymax){
            this.ymax=y;
        }
    }


    boolean contains(double x, double y){
        if (x<xmax && y<ymax && x>xmin && y>ymin) return true;
        return false;
    }

    boolean contains(BoundingBox bb){
        if (bb.xmax<this.xmax && bb.ymax<this.ymax && bb.xmin>this.xmin && bb.ymin>this.ymin) return true;
        return false;
    }

    /**
     * Sprawdza, czy dany BB przecina się z bb
     * @param bb
     * @return
     */
    boolean intersects(BoundingBox bb){
        if((empty) || (bb.empty)) {
            return false; }
        if(contains(bb) || bb.contains(this)) {
            return true; }
        if(contains(bb.xmin, bb.ymin) || contains(bb.xmax, bb.ymax)) {
            return true; }
        if(bb.contains(xmin, ymin) || bb.contains(xmax, ymax)) {
            return true; }

        return false;
    }

    BoundingBox add(BoundingBox bb){
        if(empty) {
            return bb;
        } else {
            if(xmin > bb.xmin) { xmin = bb.xmin; }
            if(xmax < bb.xmax) { xmax = bb.xmax; }

            if(ymin > bb.ymin) { ymin = bb.ymin; }
            if(ymax < bb.ymax) { ymax = bb.ymax; }

            return this;
        }
    }

    boolean isEmpty(){
        if (xmin==Double.NaN && ymin==Double.NaN && xmax==Double.NaN && ymax==Double.NaN)return true;
        return false;
    }

    double getCenterX(){
        double cx;
        if (!isEmpty()) {
            return cx=(this.xmax+this.xmin)/2;

        }
        else throw new RuntimeException("Not implemented");
    }

    double getCenterY(){
        double cy;
        if (!isEmpty()) {
            return cy=(this.ymax+this.ymin)/2;

        }
        throw new RuntimeException("Not implemented");

    }

    /**
     * Oblicza odległość pomiędzy środkami this bounding box oraz bbx
     * @param bbx prostokąt, do którego liczona jest odległość
     * @return if !isEmpty odległość, else wyrzuca wyjątek lub zwraca maksymalną możliwą wartość double
     * Ze względu na to, że są to współrzędne geograficzne, zamiast odległosci euklidesowej możesz użyć wzoru haversine
     * (ang. haversine formula)
     */
    double distanceTo(BoundingBox bbx){
        double odl;

        if (!isEmpty() && !bbx.isEmpty()) {
            double xp=(getCenterX()-bbx.getCenterX());
            double yp=getCenterY()-bbx.getCenterY();
            odl=sqrt((xp*xp)+(yp*yp));
            return odl;
        }else throw new RuntimeException("Not implemented");
    }

    public String toString(){
        return xmin+","+ymin+","+xmax+","+ymax;
    }

}
