import java.io.*;
import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Locale;

public class CSVReader{

    BufferedReader reader;
    String delimiter;
    boolean hasHeader;
    List<String> columnLabels = new ArrayList<>();
    // odwzorowanie: nazwa kolumny -> numer kolumny
    HashMap<String, Integer> columnLabelsToInt = new HashMap<>();

    public CSVReader(String filename,String delimiter,boolean hasHeader) throws IOException {
        reader = new BufferedReader(new FileReader(filename));
        this.delimiter = delimiter;
        this.hasHeader = hasHeader;
        if(hasHeader)parseHeader();
    }
    public CSVReader(String filename,String delimiter) throws IOException {
        reader = new BufferedReader(new FileReader(filename));
        this.delimiter = delimiter;
        this.hasHeader = true;
        if(hasHeader)parseHeader();
    }
    public CSVReader(String filename) throws IOException {
        reader = new BufferedReader(new FileReader(filename));
        this.delimiter = ";";
        this.hasHeader = true;
        if(hasHeader)parseHeader();
    }
    public CSVReader(Reader reader, String delimiter, boolean hasHeader) throws IOException {
        reader = new BufferedReader(reader);
        this.delimiter = ";";
        this.hasHeader = true;
        if(hasHeader)parseHeader();
    }
    String[]current;
    boolean next() throws IOException {

        String line = reader.readLine();
        if (line == null) {
            return false;
        }
        String[] header = line.split(delimiter);
        current=new String[header.length];

        for (int i = 0; i < header.length; i++) {
            //System.out.printf("%d",header.length);
            current[i]=header[i];
        }
        return true;
    }
    private void parseHeader() throws IOException {
        // wczytaj wiersz
        String line  = reader.readLine();
        if(line==null){
            return;
        }
        // podziel na pola
        String[]header = line.split(delimiter);
        // przetwarzaj dane w wierszu
        for(int i=0;i<header.length;i++){
            columnLabels.add(header[i]);
            columnLabelsToInt.put(header[i],i);
        }

    }
    int getRecordLength(){
        return current.length;
    }
    List<String> getColumnLabels(){
        return columnLabels;
    }
    boolean isMissing(int columnIndex){
        if (columnIndex>current.length){
            return false;
        }
        if (columnIndex<current.length && current[columnIndex].isEmpty()){
            return false;
        }
        return true;
    }
    boolean isMissing(String columnLabel){
        int a=columnLabelsToInt.get(columnLabel);
        if (a>current.length){
            return false;
        }
        if (a<current.length && current[a].isEmpty()) {
            return false;
        }
        return true;
    }
    int getInt(int columnIndex){
        if (columnIndex>current.length){
            return 0;
        }
        return Integer.parseInt(current[columnIndex]);
    }
    int getInt(String columnLabel){
        int a=columnLabelsToInt.get(columnLabel);
        if (a>current.length){
            return 0;
        }
        return Integer.parseInt(current[a]);
    }
    long getLong(int columnIndex){
        if (columnIndex>current.length){
            return 0;
        }
        return Long.parseLong(current[columnIndex]);
    }
    long getLong(String columnLabel){
        int a=columnLabelsToInt.get(columnLabel);
        if (a>current.length){
            return 0;
        }
        return Long.parseLong(current[a]);
    }
    double getDouble(int columnIndex){

        if (columnIndex>current.length){
            return 0;
        }
        return Double.parseDouble(current[columnIndex]);
    }

    double getDouble(String  columnLabel){
        int a=columnLabelsToInt.get(columnLabel);

        if (a>current.length){

            return 0;
        }
        return Double.parseDouble(current[a]);
    }

    String get(int columnint){
        if (columnint>current.length){

            return "0";
        }
        return current[columnint];
    }
    String get(String columnLabel){
        int a=columnLabelsToInt.get(columnLabel);
        if (a>current.length){

            return "0";
        }
        return current[a];
    }

}
