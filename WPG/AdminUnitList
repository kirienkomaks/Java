import java.io.*;
import java.util.*;
import java.lang.Math;
import java.util.function.Predicate;

public class AdminUnitList {
    List<AdminUnit> units = new ArrayList<>();
    HashMap<AdminUnit, Long> mapa = new HashMap<>();
    public void read(String filename) throws IOException {
        CSVReader reader = new CSVReader(filename,",",true);

        System.out.printf("%s",reader.getColumnLabels());
        System.out.println();


        while(reader.next()) {
            AdminUnit adm = new AdminUnit();

            int adl = reader.isMissing(3)?reader.getInt(3):0;
            String name = reader.get("name");

            //double pop = reader.isMissing("population")?reader.getDouble("population"):0;
            double area = reader.isMissing(5)?reader.getDouble(5):1;
            double density = reader.isMissing(6)?reader.getDouble(6):0;
            long parrent = reader.isMissing("parent")?reader.getLong("parent"):0;
            double x1 = reader.getDouble("x1");
            double y1 = reader.getDouble("y1");
            double x2 = reader.getDouble("x2");
            double y2 = reader.getDouble("y2");
            double x3 = reader.getDouble("x3");
            double y3 = reader.getDouble("y3");
            double x4 = reader.getDouble("x4");
            double y4 = reader.getDouble("y4");
            double x5 = reader.getDouble("x5");
            double y5 = reader.getDouble("y5");
            adm.bbox.xmin=min(x1,x2,x3,x4,x5);
            adm.bbox.ymin=min(y1,y2,y3,y4,y5);
            adm.bbox.xmax=max(x1,x2,x3,x4,x5);
            adm.bbox.ymax=max(y1,y2,y3,y4,y5);
            adm.name=name;
            adm.adminLevel=adl;
            //adm.population=pop;
            adm.area=area;
            adm.density=density;
            adm.par=parrent;
            mapa.put(adm,parrent);
            units.add(adm);


            System.out.printf(Locale.US,"LINESTRING(%f %f, %f %f, %f %f, %f %f, %f %f)",
                    reader.getDouble("x1"),
                    reader.getDouble("y1"),
                    reader.getDouble("x2"),
                    reader.getDouble("y2"),
                    reader.getDouble("x3"),
                    reader.getDouble("y3"),
                    reader.getDouble("x4"),
                    reader.getDouble("y4"),
                    reader.getDouble("x5"),
                    reader.getDouble("y5")
            );
            System.out.println();

        }

    }
    double min(double x1,double x2,double x3,double x4, double x5){
        double min1=Math.min(x1,x2);
        double min2=Math.min(x3,x4);
        double min3=Math.min(min1,min2);
        return Math.min(min3,x5);
    }
    double max(double x1,double x2,double x3,double x4, double x5){
        double min1=Math.max(x1,x2);
        double min2=Math.max(x3,x4);
        double min3=Math.max(min1,min2);
        return Math.max(min3,x5);
    }

    void getmap(long key){
        System.out.print(mapa.get(key));
    }

    void list(PrintStream out){
        for (int i=0;i<units.size();i++){
            out.printf(units.toString());
            System.out.println();
        }

    }

    void list(PrintStream out,int offset, int limit ){
        int il=0;
        for (int i=offset;i<units.size();i++) {
            if(il<limit){
                out.printf(units.get(i).toString());
                System.out.println();
            }
            else
            {break;}
            il++;
        }
    }


    AdminUnitList selectByName(String pattern, boolean regex){
        AdminUnitList ret = new AdminUnitList();
        for (int i=0;i<units.size();i++) {
            AdminUnit spr = new AdminUnit();
            spr=units.get(i);
            if(spr.name==pattern){
                ret.units.add(spr);
            }
        }
        // przeiteruj po zawartości units
        // jeżeli nazwa jednostki pasuje do wzorca dodaj do ret
        return ret;
    }
    class Sortname implements Comparator<AdminUnit> {
        public int compare(AdminUnit x, AdminUnit y){
            return x.name.compareTo(y.name);
        }

    }

    class Sortarea implements Comparator<AdminUnit> {
        public int compare(AdminUnit x, AdminUnit y){
            return Double.compare(x.area,y.area);
        }

    }
    AdminUnitList sortInplaceByName(){
        units.sort(new Sortname()) ;
        return this;


    }
    AdminUnitList sortInplaceByArea() {
        new Comparator<AdminUnit>() {
            public int compare(AdminUnit x, AdminUnit y) {
                if(x.area > y.area) { return -1; }
                if(x.area < y.area) { return 1; }
                else return 0;
            }
        };
        return this;
    }

    AdminUnitList sortInplaceByPopulation() {
        units.sort(
                (AdminUnit unit1, AdminUnit unit2) -> {
                    if(unit1.population > unit2.population) { return -1; }
                    if(unit1.population < unit2.population) { return 1; }
                    else return 0;
                }
        );
        return this;
    }

    AdminUnitList sortInplace(Comparator<AdminUnit> cmp){

        return this;
    }
    AdminUnitList sort(Comparator<AdminUnit> cmp){
        List<AdminUnit> sorted = new ArrayList<>();
        for (int i=0;i<units.size();i++){
            sorted.add((AdminUnit) units);
        }

        return (AdminUnitList) sorted;
    }
    AdminUnitList filter(Predicate<AdminUnit> pred){
        AdminUnitList filter = new AdminUnitList();
        for (int i=0;i<units.size();i++){
            AdminUnit t = units.get(i);
            if (pred.test(t)) filter.units.add(t);
        }
        return filter;
    }
    AdminUnitList filter(Predicate<AdminUnit> pred, int limit){
        if(units.size()>0) {
            AdminUnitList filter = new AdminUnitList();
            int rozm=0;
            for (int i = 0; i < units.size(); i++) {
                AdminUnit t = units.get(i);
                if (pred.test(t) && rozm<limit) {
                    filter.units.add(t);
                    rozm++;
                }
            }
            return filter;
        }  else {throw new RuntimeException("Not implemented yet");}
    }
    AdminUnitList filter(Predicate<AdminUnit> pred, int offset, int limit) {
        if(units.size()>0) {
            AdminUnitList filter = new AdminUnitList();
            int rozm=0;
            int pocz=0;
            for (int i = 0; i < units.size(); i++) {
                AdminUnit t = units.get(i);
                if (pred.test(t) && rozm<limit && pocz>offset) {
                    filter.units.add(t);
                    pocz++;
                    rozm++;
                }
            }
            return filter;
        }  else {throw new RuntimeException("Not implemented yet");}
    }

    public static void main(String[] args) throws IOException {
        PrintStream pw = new PrintStream(System.out);
        AdminUnitList lista = new AdminUnitList();
        lista.read("admin-units.csv");
        lista.list(pw,0,10);
        lista.sortInplaceByName();
        //lista.sortInplaceByArea();
        lista.list(pw,0,10);
        //System.out.printf(String.valueOf(lista.mapa));
        AdminUnitQuery query = new AdminUnitQuery()
                .selectFrom(lista)
                .where(a->a.area>1000)
                .or(a->a.name.startsWith("Sz"))
                .sort((a,b)->Double.compare(a.area,b.area))
                .limit(100);
        query.execute().list(pw);
    }
}
