import java.io.*;
import java.lang.Object;
import java.util.Hashtable;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

public class CSVReader {
    BufferedReader reader;
    String delimiter;
    boolean hasHeader;
    List<String> columnLabels = new ArrayList<>();
    // odwzorowanie: nazwa kolumny -> numer kolumny
    Map<String,Integer> columnLabelsToInt = new HashMap<>();
    /**
     *
     * @param filename - nazwa pliku
     * @param delimiter - separator pól
     * @param hasHeader - czy plik ma wiersz nagłówkowy
     */

    public CSVReader(String filename,String delimiter,boolean hasHeader) throws IOException {
        reader = new BufferedReader(new FileReader(filename));
        this.delimiter = delimiter;
        this.hasHeader = hasHeader;
        if(hasHeader)parseHeader();
    }
    String[]current;
    boolean next() throws IOException {
        // czyta następny wiersz, dzieli na elementy i przypisuje do current
        //
        String line = reader.readLine();
        if (line == null) {
            return false;
        }

        // podziel na pola
        String[] header = line.split(delimiter);
        // przetwarzaj dane w wierszu
        for (int i = 0; i < header.length; i++) {
            columnLabels.add(header[i]);

            columnLabelsToInt.put(header[i], i);
        }
        return true;
        }
    private void parseHeader() throws IOException {
        // wczytaj wiersz
        String line  = reader.readLine();
        if(line==null){
            return;
        }
        // podziel na pola
        String[]header = line.split(delimiter);
        // przetwarzaj dane w wierszu
        for(int i=0;i<header.length;i++){
            columnLabels.add(header[i]);

            columnLabelsToInt.put(header[i],i);

        }

        }

    int getRecordLength(){

        return delimiter.length();
    }
    List<String> getColumnLabels(){

        return columnLabels;
    }
    boolean isMissing(int columnIndex){


        return columnLabelsToInt.containsKey(columnIndex);
    }
    boolean isMissing(String columnLabel){
        return columnLabelsToInt.containsValue(columnLabel);

    }

    int getInt(int columnIndex){
        return columnLabelsToInt.get(columnIndex);
    }
    int getInt(String columnLabel){
        return columnLabelsToInt.get(columnLabel);
    }
    long getLong(int columnIndex){
        return columnLabelsToInt.get(columnIndex);
    }
    long getLong(String columnLabel){
        return columnLabelsToInt.get(columnLabel);
    }
    double getDouble(int columnIndex){
        return columnLabelsToInt.get(columnIndex);

    }
    double getDouble(String  columnLable){
        return (double)columnLabelsToInt.get(columnLable);

    }




}
